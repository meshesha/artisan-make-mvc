<?php
/**
* This file generated by Meshesha/ArtisanMakeMvc package.
*
*/

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
$USE_MODEL$;

class $MODEL_NAME$Test extends TestCase
{
    use RefreshDatabase;

    public function test_main_$TABLE_NAME$_page_contains_empty_table()
    {
        $response = $this->get('/$TABLE_NAME$');
        $response->assertOk();
        $response->assertSee(__('No $TABLE_NAME$ found'));
    }

    public function test_main_$TABLE_NAME$_page_contains_non_empty_table()
    {
        $$MODEL_NAME_LOWER$ = $MODEL_NAME$::create([
            $MODEL_CREATE$
        ]);
        $response = $this->get('/$TABLE_NAME$');
        $response->assertOk();
        $response->assertDontSee(__('No $TABLE_NAME$ found'));
        $response->assertViewHas('$TABLE_NAME$', function ($collection) use ($$MODEL_NAME_LOWER$) {
            return $collection->contains($$MODEL_NAME_LOWER$);
        });
    }

    public function test_main_$TABLE_NAME$_page_contains_table_$TABLE_NAME$()
    {
        $$MODEL_NAME_LOWER$ = $MODEL_NAME$::create([
            $MODEL_CREATE$
        ]);
        $response = $this->get('/$TABLE_NAME$');
        $response->assertOk();
        $response->assertViewHas('$TABLE_NAME$', function ($collection) use ($$MODEL_NAME_LOWER$) {
            return $collection->contains($$MODEL_NAME_LOWER$);
        });
    }

    public function test_paginated_$TABLE_NAME$_table_doesnt_contain_11th_record()
    {
        $$MODEL_NAME_LOWER$ = $MODEL_NAME$::factory(11)->create();
        $last$MODEL_NAME$ = $$MODEL_NAME_LOWER$->last();
        $response = $this->get('/$TABLE_NAME$');
        $response->assertOk();
        $response->assertViewHas('$TABLE_NAME$', function ($collection) use ($last$MODEL_NAME$) {
            return !$collection->contains($last$MODEL_NAME$);
        });
    }

    public function test_can_access_$MODEL_NAME_LOWER$_create_page()
    {
        $response = $this->get('/$TABLE_NAME$/create');
        $response->assertOk();
    }


    public function test_create_$MODEL_NAME_LOWER$_successful()
    {
        $$MODEL_NAME_LOWER$ = [
            $MODEL_CREATE$
        ];
        $response = $this->followingRedirects()->post('/$TABLE_NAME$', $$MODEL_NAME_LOWER$);
        $response->assertStatus(200);
        $this->assertDatabaseHas('$TABLE_NAME$', $$MODEL_NAME_LOWER$);
        $last$MODEL_NAME_LOWER$ = $MODEL_NAME$::latest()->first();
        $this->assertEquals($$MODEL_NAME_LOWER$['$MODEL_COL_NAME$'], $last$MODEL_NAME_LOWER$->$MODEL_COL_NAME$);
    }

    public function test_$MODEL_NAME_LOWER$_edit_contains_correct_values()
    {
        $$MODEL_NAME_LOWER$ = $MODEL_NAME$::factory()->create();
        $this->assertDatabaseHas('$TABLE_NAME$', $$MODEL_NAME_LOWER$->toArray());
        $this->assertModelExists($$MODEL_NAME_LOWER$);
        $response = $this->get('$TABLE_NAME$/' .$$MODEL_NAME_LOWER$->id . '/edit');
        $response->assertOk();
        $response->assertViewHas('$MODEL_NAME_LOWER$', $$MODEL_NAME_LOWER$);
    }

    public function test_$MODEL_NAME_LOWER$_delete_successful()
    {
        $$MODEL_NAME_LOWER$ = $MODEL_NAME$::factory()->create();
        $response = $this->delete('$TABLE_NAME$/' . $$MODEL_NAME_LOWER$->id);
        $response->assertStatus(302);
        $this->assertDatabaseMissing('$TABLE_NAME$', $$MODEL_NAME_LOWER$->toArray());
        $this->assertModelMissing($$MODEL_NAME_LOWER$);
        $this->assertDatabaseCount('$TABLE_NAME$', 0);
    }

}
